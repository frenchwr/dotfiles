# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

function _ssh_hosts() {
   local cur="${COMP_WORDS[COMP_CWORD]}"
   COMPREPLY=()
   local ssh_hosts=`grep ^Host ~/.ssh/config | cut -d' ' -f2 | xargs`
   [[ ! ${cur} == -* ]] && COMPREPLY=( $(compgen -W "${ssh_hosts}" -- ${cur}) )
}

# enables auto-completion of commands in your history with the up/down arrow keys
# if block checks if the session is interactive to avoid getting bind warnings when
# scp files, etc. The $- variable represents the current options set for the shell.
[[ $- == *i* ]] && bind '"\e[A":history-search-backward'
[[ $- == *i* ]] && bind '"\e[B":history-search-forward'

# firefox snap will not read from hidden directories in home directory,
# so copy it out to $HOME/tmp and open it from there.
function firefox_snap_open_html_doc() {
   if [ $# -ne 1 ]; then
      echo "Usage: $FUNCNAME filepath"
      return 1
   fi
   htmlpath=$1

   tmpdir=$HOME/tmp/$(date +%Y-%m-%dT%H:%M:%S)
   tmphtml=$tmpdir/tmp.html # assume html file for now
   mkdir -p $tmpdir

   cp $htmlpath $tmphtml
   firefox $tmphtml

   # I'm going to deal with cleaning up manually as the firefox cli
   # does not provide straightforward foregrounding capability.
   #rm -r $tmpdir
}

# stop, restore, start, and shell into a multipass vm from the provided snapshot number
function mpfresh() {
   if [ $# -ne 2 ]; then
      echo "Usage: $FUNCNAME vm snapshot_number"
      echo "Example: $FUNCNAME charm-dev-vm 1"
      return 1
   fi
   vm=$1
   snapshot=$2
   multipass stop "${vm}"
   multipass restore -d "${vm}".snapshot"${snapshot}"
   multipass start "${vm}"
   multipass shell "${vm}"
}

# sync repo from local to remote
function sync_repo_to_remote() {
   if [ $# -ne 2 ]; then
      echo "Usage: $FUNCNAME repo_path remote_host"
      echo "Example: $FUNCNAME $HOME/code/intel-npu-driver-snap tf-npu-dell-xps-13-9340-c32267"
      return 1
   fi
   repo_path=$(realpath $1) # realpath will strip to the trailing slash for us
   remote_host=$2
   rsync -a $repo_path $remote_host:~ubuntu # assume ubuntu user on remote host
}

# sync repo from remote to local
#
# note, I don't plan to use this as it feels unsafe to sync in both
# directions. instead, I will always edit locally and sync to remote as
# needed. I will leave this function here commented out in case later
# I decide this is needed.
#
#function sync_repo_from_remote() {
#   if [ $# -ne 2 ]; then
#      echo "Usage: $FUNCNAME remote_host:remote_path local_parent_path"
#      echo "Example: $FUNCNAME tf-npu-dell-xps-13-9340-c32267:~ubuntu/intel-npu-driver-snap $HOME/code/"
#      return 1
#   fi
#   remote_host_and_path=$1
#   local_parent_path=$2
#   rsync -a $remote_host_and_path $local_parent_path
#}

function git_branch() {
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}
export PS1="\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\] \[\033[00;32m\]\$(git_branch)\[\033[00m\]\$ "

export GPGKEY=DEDD623C985D614C131E0217A3CB445B27EF8863
export DEBEMAIL="will.french@canonical.com"
export EMAIL="will.french@canonical.com"
export DEBFULLNAME="Will French"
export PATH=$PATH:$HOME/bin

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
if command -v pyenv 2>&1 >/dev/null
then
   eval "$(pyenv init -)"
   eval "$(pyenv virtualenv-init -)"
fi

# quilt
alias dquilt="quilt --quiltrc=${HOME}/.quiltrc-dpkg"
. /usr/share/bash-completion/completions/quilt
complete -F _quilt_completion $_quilt_complete_opt dquilt
